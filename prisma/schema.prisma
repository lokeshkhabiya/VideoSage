generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id    String   @id @default(uuid())
  username   String   @db.VarChar(255) @unique 
  first_name String   @db.VarChar(255) 
  last_name  String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  created_at DateTime @default(now())
  spaces     Space[]
  contents   UserContent[] // Changed from Content[] to UserContent[]
}

model Space {
  space_id      String          @id @default(uuid())
  user_id       String
  space_name    String          @db.VarChar(255) 
  created_at    DateTime        @default(now())
  user          User            @relation(fields: [user_id], references: [user_id], onUpdate: NoAction, onDelete: NoAction)
  contents      Content[]
  // spaceContents Space_Content[]
}

enum ContentType {
  YOUTUBE_CONTENT
  DOCUMENT_CONTENT
}


model Content {
  content_id      String           @id @default(uuid())
  space_id        String?
  content_type    ContentType
  created_at      DateTime         @default(now())
  users           UserContent[]    // New relation to UserContent
  space           Space?           @relation(fields: [space_id], references: [space_id], onUpdate: NoAction, onDelete: NoAction)
  youtubeContent  YoutubeContent?
  documentContent DocumentContent?
}

model UserContent {
  user_id    String
  content_id String
  user       User   @relation(fields: [user_id], references: [user_id], onUpdate: NoAction, onDelete: NoAction)
  content    Content @relation(fields: [content_id], references: [content_id], onUpdate: NoAction, onDelete: NoAction)

  @@id([user_id, content_id]) // Composite primary key
}

model YoutubeContent {
  content_id    String  @id @default(uuid())
  youtube_id    String  @unique // Ensure youtube_id is unique
  title         String  @db.Text
  description   String  @db.Text
  thumbnail_url String  @db.Text
  transcript    Json
  youtube_url   String  @db.Text
  content       Content @relation(fields: [content_id], references: [content_id], onUpdate: NoAction, onDelete: NoAction)
  metadata      Metadata[]
}

model DocumentContent {
  content_id String  @id @default(uuid())
  filename   String  @db.VarChar(255)
  file_url   String  @db.VarChar(255)
  doc_id     String  @unique
  hash       String  @unique
  content    Content @relation(fields: [content_id], references: [content_id], onUpdate: NoAction, onDelete: NoAction)
}

model Metadata {
  metadata_id String          @id @default(uuid())
  youtube_id  String          @unique
  summary     String?         @db.Text
  flashcards  Json?           // Storing flashcards as JSON for flexibility
  mindmap     Json?           // Storing mindmap as JSON for structured format
  quiz        Json?           // Storing quiz questions and answers as JSON
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  youtubeContent YoutubeContent @relation(fields: [youtube_id], references: [youtube_id], onUpdate: NoAction, onDelete: Cascade)
}